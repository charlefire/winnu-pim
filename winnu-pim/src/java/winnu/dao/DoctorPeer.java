package winnu.dao;

import java.util.ArrayList;
import java.util.List;

import org.apache.torque.util.Criteria;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Mon Feb 15 20:18:02 SGT 2010]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
@SuppressWarnings("serial")
public class DoctorPeer extends winnu.dao.BaseDoctorPeer {
	
	public static boolean addDoctor(String name, String lisenceNo, String s2No){
		Criteria criteria = new Criteria();
		criteria.add(DoctorPeer.DOCTORNAME,name);
		criteria.add(DoctorPeer.LICENSENO, lisenceNo);
		criteria.add(DoctorPeer.S2NO, s2No);
		try{
			DoctorPeer.doInsert(criteria);
			return true;
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
	}
	

	//retrieve doctor using id
	public static Doctor retrieveDoctor(String id){
		Criteria criteria = new Criteria();
		criteria.add(DoctorPeer.DOCTORID, id);
		try{
			return (Doctor)DoctorPeer.doSelect(criteria).get(0);
		}catch(Exception e){
			e.printStackTrace();
			return null;
		}
	}
	
	//retrieve using name
	@SuppressWarnings("unchecked")
	public static List<Doctor> retrieveAllName(String query){
		Criteria criteria = new Criteria();
		criteria.add(DoctorPeer.DOCTORNAME, query);
		try{
			return (List<Doctor>)DoctorPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<Doctor>();
		}
	}
	
	//retrieve using license no
	@SuppressWarnings("unchecked")
	public static List<Doctor> retrieveLicenseNo(String query){
		Criteria criteria = new Criteria();
		criteria.add(DoctorPeer.LICENSENO, query);
		try{
			return (List<Doctor>)DoctorPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<Doctor>();
		}
	}
	
	//retrieve using s2 no
	@SuppressWarnings("unchecked")
	public static List<Doctor> retrieveAllS2No(String query){
		Criteria criteria = new Criteria();
		criteria.add(DoctorPeer.S2NO, query);
		try{
			return (List<Doctor>)DoctorPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<Doctor>();
		}
	}
	
}
