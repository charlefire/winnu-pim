package winnu.dao;

import java.util.ArrayList;
import java.util.List;

import org.apache.torque.TorqueException;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.Record;

/**
 * The skeleton for this class was autogenerated by Torque on:
 *
 * [Tue Feb 09 20:51:03 SGT 2010]
 *
 *  You should add additional methods to this class to meet the
 *  application requirements.  This class will only be generated as
 *  long as it does not already exist in the output directory.
 */
@SuppressWarnings({ "serial", "unused" })
public class UserPeer extends winnu.dao.BaseUserPeer
{
	//add user account
	public static boolean addUser(String username, String password, String lastName, String middleName, String firstName, String position, String address, String contactNumber, String type, int deleted){	
		Criteria criteria = new Criteria();
		
		criteria.add(UserPeer.USERNAME, username);
		criteria.add(UserPeer.PASSWORD, password);
		criteria.add(UserPeer.LASTNAME, lastName);
		criteria.add(UserPeer.MIDDLENAME, middleName);
		criteria.add(UserPeer.FIRSTNAME, firstName);
		criteria.add(UserPeer.POSITION, position);
		criteria.add(UserPeer.ADDRESS, address);
		criteria.add(UserPeer.CONTACTNO, contactNumber);
		criteria.add(UserPeer.TYPE, type);
		criteria.add(UserPeer.DELETED, deleted);
		
		//criteria.add(UserPeer.ACTIVE, false);		
		
		try{
			UserPeer.doInsert(criteria);
			
			
			return true;
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
				
		
		
	}	
	
	
	@SuppressWarnings("unchecked")
	public static List<User> retrieveAllUsers(){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.DELETED, false);
		
		try{
			return (List<User>)UserPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<User>();
		}
	}	
	/*
		
	//retrieve
	public static List<User> retrieveInactiveUsers(){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.ACTIVE, false);
		try{
			return (List<User>)UserPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<User>();
		}
	}
	*/
	
	//filter using username
	@SuppressWarnings("unchecked")
	public static List<User> retrieveAllUsername(String query){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.USERNAME, query);
		try{
			return (List<User>)UserPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<User>();
		}
	}
	
	//filter using fullname
	@SuppressWarnings("unchecked")
	public static List<User> retrieveAllLastname(String query){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.LASTNAME, query);
		try{
			return (List<User>)UserPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<User>();
		}
	}
	
	//filter using position
	@SuppressWarnings("unchecked")
	public static List<User> retrieveAllPosition(String query){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.POSITION, query);
		try{
			return (List<User>)UserPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<User>();
		}
	}
	
	//filter using address
	@SuppressWarnings("unchecked")
	public static List<User> retrieveAllAddress(String query){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.ADDRESS, query);
		try{
			return (List<User>)UserPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<User>();
		}
	}
	
	//retrieve using contact number
	@SuppressWarnings("unchecked")
	public static List<User> retrieveAllContactNo(String query){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.CONTACTNO, query);
		try{
			return (List<User>)UserPeer.doSelect(criteria);
		}catch(Exception e){
			e.printStackTrace();
			return new ArrayList<User>();
		}
	}
	
	//retrieve for editing
	public static User retrieveUser(int id){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.USERID, id);
		try{
			return (User)UserPeer.doSelect(criteria).get(0);
		}catch(Exception e){
			e.printStackTrace();
			return null;
		}
	}
	
	public static User retrieveUser(String type){
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.TYPE, type);
		try{
			return (User)UserPeer.doSelect(criteria).get(0);
		}catch(Exception e){
			e.printStackTrace();
			return null;
		}
	}
	
	//update user
	public static boolean updateUser(int userId, String username, String password, String firstName, String middleName, String lastName, String position, String address, String contactNo, String type){
		Criteria selectCriteria = new Criteria();
		selectCriteria.add(UserPeer.USERID, userId);
		
		Criteria criteria = new Criteria();
		//criteria.add(UserPeer.USERNAME, username);
		criteria.add(UserPeer.PASSWORD, password);
		criteria.add(UserPeer.FIRSTNAME, firstName);
		criteria.add(UserPeer.MIDDLENAME, middleName);
		criteria.add(UserPeer.LASTNAME, lastName);
		criteria.add(UserPeer.POSITION, position);
		criteria.add(UserPeer.ADDRESS, address);
		criteria.add(UserPeer.CONTACTNO, contactNo);
		criteria.add(UserPeer.TYPE, type);
		
		
		try{
			UserPeer.doUpdate(selectCriteria, criteria);
			return true;
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
	}
	
	/*
	//activate user
	public static boolean activeUser(String username){
		Criteria selectCriteria = new Criteria();
		selectCriteria.add(UserPeer.USERNAME, username);
		
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.ACTIVE, true);
		
		try{
			UserPeer.doUpdate(selectCriteria, criteria);
			return true;
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
	}
	
	//deactivate
	public static boolean deactiveUser(String username){
		Criteria selectCriteria = new Criteria();
		selectCriteria.add(UserPeer.USERNAME, username);
		
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.ACTIVE, false);
		
		try{
			UserPeer.doUpdate(selectCriteria, criteria);
			return true;
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
	}
	*/
	//delete
	
	public static boolean deleteUser(String username){
		Criteria selectCriteria = new Criteria();
		selectCriteria.add(UserPeer.USERNAME, username);
		
		Criteria criteria = new Criteria();
		criteria.add(UserPeer.DELETED, true);
		
		try{
			UserPeer.doUpdate(selectCriteria, criteria);
			return true;
		}catch(Exception e){
			e.printStackTrace();
			return false;
		}
		
	}
}
